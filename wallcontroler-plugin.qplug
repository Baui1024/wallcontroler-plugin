-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "Wall Controller",
  Version = "1.0",
  BuildVersion = "1.0.0.49",
  Id = "ecb3592b-01c9-4f20-9d34-9f98002e56fc",
  Author = "BBuilds",
  Description = "A very basic plugin"  
}

-- Define the color of the plugin object in the design
Plugin = {102,102,102}
White = {255,255,255}
Black = {0,0,0,255}
Clear = {0,0,0,0}
Grey = {230,230,230}
IDButtonColor = {248,240,0,255}
DarkGrey  = {153,153,153,128}
DarkGrey2  = {182,194,219}
Blue = {5,97,165}
Green = {0,159,60}
LightGreen = {0,173,99}
Faders = {110,198,241}
LED = {255,0,0}
Text = {51,51,51}

function GetColor(props)
  return { 102, 102, 102 }
end


-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Wallcontroller" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Setup" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Operation Mode",
    Type = "enum",
    Choices = {"Individual", "Predefined Top/Bottom", "Predefined Left/Right"},
    Value = "Individual"
  })
  
  table.insert(props, {
    Name = "Top Buttons Mode",
    Type = "enum",
    Choices = {"Radio Buttons", "Individual"},
    Value = "Radio Buttons"
  })
  
  table.insert(props, {
    Name = "Bottom Buttons Mode",
    Type = "enum",
    Choices = {"Radio Buttons", "Individual"},
    Value = "Radio Buttons"
  })
  
  table.insert(props, {
    Name = "Left Buttons Mode",
    Type = "enum",
    Choices = {"Radio Buttons", "Individual"},
    Value = "Radio Buttons"
  })
  
  table.insert(props, {
    Name = "Right Buttons Mode",
    Type = "enum",
    Choices = {"Radio Buttons", "Individual"},
    Value = "Radio Buttons"
  })
  
  for i = 1, 4 do
    table.insert(props, {
      Name = "Button " .. i .. " Mode",
      Type = "enum",
      Choices = {"Momentary", "Trigger", "Toggle"},
      Value = "Momentary"
    })
  end
  
  table.insert(props, {
    Name = "Color Mode",
    Type = "enum",
    Choices = {"Pre-defined Options", "Hex Values"},
    Value = "Pre-defined Options"
  })
  
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props["Operation Mode"].Value == "Individual" then
    props["Top Buttons Mode"].IsHidden = true
    props["Bottom Buttons Mode"].IsHidden = true
    props["Left Buttons Mode"].IsHidden = true
    props["Right Buttons Mode"].IsHidden = true
    for i = 1, 4 do
      props["Button " .. i .. " Mode"].IsHidden = false
    end
  elseif props["Operation Mode"].Value == "Predefined Top/Bottom" then
    props["Top Buttons Mode"].IsHidden = false
    props["Bottom Buttons Mode"].IsHidden = false
    props["Left Buttons Mode"].IsHidden = true
    props["Right Buttons Mode"].IsHidden = true
    if props["Top Buttons Mode"].Value == "Radio Buttons" then
      props["Button " .. 1 .. " Mode"].IsHidden = true
      props["Button " .. 2 .. " Mode"].IsHidden = true
    end
    if props["Bottom Buttons Mode"].Value == "Radio Buttons" then
      props["Button " .. 3 .. " Mode"].IsHidden = true
      props["Button " .. 4 .. " Mode"].IsHidden = true
    end
  elseif props["Operation Mode"].Value == "Predefined Left/Right" then
    props["Top Buttons Mode"].IsHidden = true
    props["Bottom Buttons Mode"].IsHidden = true
    props["Left Buttons Mode"].IsHidden = false
    props["Right Buttons Mode"].IsHidden = false
    if props["Left Buttons Mode"].Value == "Radio Buttons" then
      props["Button " .. 1 .. " Mode"].IsHidden = true
      props["Button " .. 3 .. " Mode"].IsHidden = true
    end
    if props["Right Buttons Mode"].Value == "Radio Buttons" then
        props["Button " .. 2 .. " Mode"].IsHidden = true
        props["Button " .. 4 .. " Mode"].IsHidden = true
    end
  end
  
  
  
  
  
  
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls,{Name = "code",ControlType = "Text",PinStyle = "Input",Count = 1})
  ButtonType = {
    "Momentary",
    "Momentary",
    "Momentary",
    "Momentary",
  }
  
  if props["Operation Mode"].Value == "Individual" then
    for i = 1, #ButtonType do
      ButtonType[i] = props["Button " .. i .. " Mode"].Value
    end
  elseif props["Operation Mode"].Value == "Predefined Top/Bottom" then
    if props["Top Buttons Mode"].Value == "Radio Buttons" then
      ButtonType[1] = "Toggle"
      ButtonType[2] = "Toggle"
    elseif props["Top Buttons Mode"].Value == "Individual" then
      for i = 1, 2 do
        if props["Button " .. i .. " Mode"].Value == "Trigger" then
          ButtonType[i] = "Trigger"
        elseif props["Button " .. i .. " Mode"].Value == "Toggle" then
          ButtonType[i] = "Toggle"
        end
      end
    end
    if props["Bottom Buttons Mode"].Value == "Radio Buttons" then
      ButtonType[3] = "Toggle"
      ButtonType[4] = "Toggle"
    elseif props["Bottom Buttons Mode"].Value == "Individual" then
      for i = 3, 4 do
        if props["Button " .. i .. " Mode"].Value == "Trigger" then
          ButtonType[i] = "Trigger"
        elseif props["Button " .. i .. " Mode"].Value == "Toggle" then
          ButtonType[i] = "Toggle"
        end
      end
    end
  elseif props["Operation Mode"].Value == "Predefined Left/Right" then
    if props["Left Buttons Mode"].Value == "Radio Buttons" then
      ButtonType[1] = "Toggle"
      ButtonType[3] = "Toggle"
    elseif props["Left Buttons Mode"].Value == "Individual" then
      for i = 1, 3, 2 do
        if props["Button " .. i .. " Mode"].Value == "Trigger" then
          ButtonType[i] = "Trigger"
        elseif props["Button " .. i .. " Mode"].Value == "Toggle" then
          ButtonType[i] = "Toggle"
        end
      end
    end
    if props["Right Buttons Mode"].Value == "Radio Buttons" then
      ButtonType[2] = "Toggle"
      ButtonType[4] = "Toggle"
    elseif props["Right Buttons Mode"].Value == "Individual" then
      for i = 2, 4, 2 do
        if props["Button " .. i .. " Mode"].Value == "Trigger" then
          ButtonType[i] = "Trigger"
        elseif props["Button " .. i .. " Mode"].Value == "Toggle" then
          ButtonType[i] = "Toggle"
        end
      end
    end
  end
  
  if props["Color Mode"].Value == "Pre-defined Options" then
    DefaultColorOn = "White"
    DefaultColorOff = "Off"
  else
    DefaultColorOn = "#FFFFFF"
    DefaultColorOff = "#000000"
  end
  
  for i = 1, 4 do 
    table.insert(ctrls, {
      Name = "Button" .. i,
      ControlType = "Button",
      ButtonType = ButtonType[i],
      Count = 1,
      UserPin = true,
      PinStyle = "Both",
    })
    table.insert(ctrls, {
      Name = "Color" .. i,
      ControlType = "Text",
      Count = 1,
      UserPin = true,
      DefaultValue = DefaultColorOn,
      PinStyle = "Both",
    })
    table.insert(ctrls, {
      Name = "ColorOn" .. i,
      ControlType = "Text",
      Count = 1,
      UserPin = true,
      DefaultValue = DefaultColorOn,
      PinStyle = "Both",
    })
    table.insert(ctrls, {
      Name = "ColorOnIndicator" .. i,
      ControlType = "Indicator",
      IndicatorType = "Led",
      Count = 1,
      UserPin = false,
      DefaultValue = 20,
      PinStyle = "None",
    })
    table.insert(ctrls, {
      Name = "ColorOff" .. i,
      ControlType = "Text",
      Count = 1,
      UserPin = true,
      DefaultValue = DefaultColorOff,
      PinStyle = "Both",
    })
    table.insert(ctrls, {
      Name = "ColorOffIndicator" .. i,
      ControlType = "Indicator",
      IndicatorType = "Led",
      Count = 1,
      UserPin = false,
      DefaultValue = 20,
      PinStyle = "None",
    })
  end
  table.insert(ctrls, {
    Name = "Status",
    ControlType = "Indicator",
    IndicatorType = "Status",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
  })
  table.insert(ctrls, {
    Name = "IP",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  layout["code"] = {PrettyName = "Code",Style = "None"}
  table.insert(graphics,{Type = "GroupBox",Fill = White,CornerRadius = 0,Position = {0,0},Size = {446,75}})
  table.insert(graphics,{Type = "GroupBox",Fill = Grey,CornerRadius = 0,Position = {11,75},Size = {425,396}})
  table.insert(graphics,{Type = "Header",Text = "Connection & Status",Color = Black,Font = "Roboto",FontSize = 14,FontStyle = "Regular",HTextAlignment = "Center",Position = {42,86},Size = {364,6}})
  table.insert(graphics,{Type = "Label",Text = "IP Address",Fill = Clear,Font = "Roboto",FontSize = 11,HTextAlign = "Right",Position = {108,111},Size = {65,16}})
  layout["IP"] = {PrettyName = "IP Address",Style = "Text",CornerRadius = 0,Margin = 0,Position = {186,111},Size = {153,16}}
  layout["Status"] = {PrettyName = "Status",Style = "Text",CornerRadius = 0,Margin = 0,Position = {108,137},Size = {231,32}}
  
  table.insert(graphics,{Type = "Header",Text = "Controls",Color = Black,Font = "Roboto",FontSize = 14,FontStyle = "Regular",HTextAlignment = "Center",Position = {42,190},Size = {364,6}})
  
  ColorStyle = props["Color Mode"].Value == "Pre-defined Options" and "ComboBox" or "Text"
  
  DualColorOptions = {
    true,
    true,
    true,
    true
  }
  
  ButtonType = {
    "Momentary",
    "Momentary",
    "Momentary",
    "Momentary",
  }
  
  if props["Operation Mode"].Value == "Individual" then
    for i = 1, #ButtonType do
      ButtonType[i] = props["Button " .. i .. " Mode"].Value
    end
  elseif props["Operation Mode"].Value == "Predefined Top/Bottom" then
    if props["Top Buttons Mode"].Value == "Radio Buttons" then
      ButtonType[1] = "Toggle"
      ButtonType[2] = "Toggle"
    elseif props["Top Buttons Mode"].Value == "Individual" then
      for i = 1, 2 do
        if props["Button " .. i .. " Mode"].Value == "Trigger" then
          ButtonType[i] = "Trigger"
        elseif props["Button " .. i .. " Mode"].Value == "Toggle" then
          ButtonType[i] = "Toggle"
        end
      end
    end
    if props["Bottom Buttons Mode"].Value == "Radio Buttons" then
      ButtonType[3] = "Toggle"
      ButtonType[4] = "Toggle"
    elseif props["Bottom Buttons Mode"].Value == "Individual" then
      for i = 3, 4 do
        if props["Button " .. i .. " Mode"].Value == "Trigger" then
          ButtonType[i] = "Trigger"
        elseif props["Button " .. i .. " Mode"].Value == "Toggle" then
          ButtonType[i] = "Toggle"
        end
      end
    end
  elseif props["Operation Mode"].Value == "Predefined Left/Right" then
    if props["Left Buttons Mode"].Value == "Radio Buttons" then
        ButtonType[1] = "Toggle"
        ButtonType[3] = "Toggle"
    elseif props["Left Buttons Mode"].Value == "Individual" then
      for i = 1, 3, 2 do
        if props["Button " .. i .. " Mode"].Value == "Trigger" then
          ButtonType[i] = "Trigger"
        elseif props["Button " .. i .. " Mode"].Value == "Toggle" then
          ButtonType[i] = "Toggle"
        end
      end
    end
    if props["Right Buttons Mode"].Value == "Radio Buttons" then
      ButtonType[2] = "Toggle"
      ButtonType[4] = "Toggle"
    elseif props["Right Buttons Mode"].Value == "Individual" then
      for i = 2, 4, 2 do
        if props["Button " .. i .. " Mode"].Value == "Trigger" then
          ButtonType[i] = "Trigger"
        elseif props["Button " .. i .. " Mode"].Value == "Toggle" then
          ButtonType[i] = "Toggle"
        end
      end
    end
  end
  
  LabelIndexPos = {
    {57,214},
    {250,214},
    {57,328},
    {250,328}
  }
  LabelButtonPos = {
    {42,256},
    {236,256},
    {42,370},
    {236,370}
  }
  ButtonPos = {
    {93,243},
    {287,243},
    {93,357},
    {287,357}
  }
  
  for i = 1, 4 do
    table.insert(graphics,{Type = "Label",Text = tostring(i),Color = Black,Font = "Roboto",FontSize = 11,FontStyle = "Regular",HTextAlignment = "Center",Position = LabelIndexPos[i],Size = {142,29}})
    table.insert(graphics,{Type = "Label",Text = "Button",Color = Black,Font = "Roboto",FontSize = 11,FontStyle = "Regular",HTextAlignment = "Center",Position = LabelButtonPos[i],Size = {51,20}})
    if DualColorOptions[i] then
      table.insert(graphics,{Type = "Label",Text = "Color On",Color = Black,Font = "Roboto",FontSize = 11,FontStyle = "Regular",HTextAlignment = "Center",Position = {LabelButtonPos[i][1],LabelButtonPos[i][2]+32},Size = {51,20}})
      table.insert(graphics,{Type = "Label",Text = "Color Off",Color = Black,Font = "Roboto",FontSize = 11,FontStyle = "Regular",HTextAlignment = "Center",Position = {LabelButtonPos[i][1],LabelButtonPos[i][2]+52},Size = {51,20}})
      layout["ColorOn"..i] = {PrettyName = "Color On "..i,Style = ColorStyle, TextBoxStyle = "Normal",Margin = 2, CornerRadius = 0,Position = {LabelButtonPos[i][1]+51,LabelButtonPos[i][2]+32},Size = {71,20}}
      layout["ColorOnIndicator"..i] = {PrettyName = "Color On "..i,Style = "Meter", MeterStyle = "Level",Margin = 2, CornerRadius = 0,Position = {LabelButtonPos[i][1]+51+71,LabelButtonPos[i][2]+32},Size = {20,20}}
      layout["ColorOff"..i] = {PrettyName = "Color Off "..i,Style = ColorStyle, TextBoxStyle = "Normal",Margin = 2, CornerRadius = 0,Position = {LabelButtonPos[i][1]+51,LabelButtonPos[i][2]+52},Size = {71,20}}
      layout["ColorOffIndicator"..i] = {PrettyName = "Color Off "..i,Style = "Meter", MeterStyle = "Level",Margin = 2, CornerRadius = 0,Position = {LabelButtonPos[i][1]+51+71,LabelButtonPos[i][2]+52},Size = {20,20}}
    else
      table.insert(graphics,{Type = "Label",Text = "Color",Color = Black,Font = "Roboto",FontSize = 11,FontStyle = "Regular",HTextAlignment = "Center",Position =  {LabelButtonPos[i][1],LabelButtonPos[i][2]+32},Size = {51,20}})
      layout["Color"..i] = {PrettyName = "Color "..i,Style = ColorStyle, TextBoxStyle = "Normal",Margin = 2, CornerRadius = 0,Position = {LabelButtonPos[i][1]+51,LabelButtonPos[i][2]+32},Size = {71,20}}
    end
    layout["Button"..i] = {PrettyName = "Button "..i,Style = "Button",ButtonStyle = ButtonType[i],Margin = 2, CornerRadius = 0,Position = ButtonPos[i],Size = {71,45}}
  end
  return layout, graphics
end

--Start event based logic
if Controls then
end
